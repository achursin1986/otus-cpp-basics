#include <gtest/gtest.h>

#include "gmock/gmock.h"
#include "isis.hpp"
#include "utils.hpp"

using namespace std;

template <typename T>
::testing::AssertionResult ArraysMatch(T* expected, T* actual, int size) {
	for (int i = 0; i < size; i++) {
		if (expected[i] != actual[i]) {
			return ::testing::AssertionFailure()
			       << "array[" << i << "] (" << actual[i]
			       << ") != expected[" << i << "] (" << expected[i]
			       << ")";
		}
	}

	return ::testing::AssertionSuccess();
}

TEST(utils, fletcher_chksum) {
	uint16_t expected = 0xf4e4;
	unsigned char PDU[] = {
	    0x83, 0x1b, 0x01, 0x00, 0x14, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04,
	    0x25, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	    0x04, 0x02, 0x00, 0x00, 0x03, 0x01, 0x04, 0x03, 0x49, 0x00, 0x01,
	    0x0e, 0x02, 0x05, 0xd4, 0x81, 0x02, 0xcc, 0x8e, 0x86, 0x04, 0x65,
	    0x65, 0x65, 0x65, 0x84, 0x04, 0x65, 0x65, 0x65, 0x65, 0x89, 0x04,
	    0x76, 0x6d, 0x78, 0x31, 0xf2, 0x05, 0x65, 0x65, 0x65, 0x65, 0x00,
	    0x80, 0x30, 0x00, 0x80, 0x80, 0x80, 0x65, 0x65, 0x65, 0x65, 0xff,
	    0xff, 0xff, 0xff, 0x0a, 0x80, 0x80, 0x80, 0x0a, 0x01, 0x00, 0x00,
	    0xff, 0xff, 0xff, 0xfe, 0x0a, 0x80, 0x80, 0x80, 0x0a, 0x03, 0x00,
	    0x00, 0xff, 0xff, 0xff, 0xfe, 0x0a, 0x80, 0x80, 0x80, 0x0a, 0x02,
	    0x00, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x87, 0x24, 0x00, 0x00, 0x00,
	    0x00, 0x20, 0x65, 0x65, 0x65, 0x65, 0x00, 0x00, 0x00, 0x0a, 0x1f,
	    0x0a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x1f, 0x0a, 0x03,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x1f, 0x0a, 0x02, 0x00, 0x00,
	    0x02, 0x0c, 0x00, 0x0a, 0x80, 0x80, 0x80, 0x00, 0x02, 0x00, 0x02,
	    0x00, 0x02, 0x00, 0x16, 0x21, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02,
	    0x00, 0x00, 0x00, 0x0a, 0x16, 0x06, 0x04, 0x0a, 0x01, 0x00, 0x01,
	    0x08, 0x04, 0x0a, 0x01, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x01,
	    0x4d, 0x00, 0x00, 0x00, 0x07};
	ASSERT_EQ(expected,
		  htons(fletcher_checksum(PDU + 12, sizeof(PDU) - 12, 12)));
}

TEST(utils, parameter_set_sysid) {
       unsigned char expected_array[] = {0x0a, 0xc1, 0x00, 0x01, 0x00, 0x01};
       unsigned char result[6]{};
       std::string input = {"0ac1.0001.0001"};
       setParam<sysid>(result, input);
       EXPECT_TRUE(ArraysMatch<unsigned char>(expected_array, result, sizeof(expected_array)));
}

TEST(utils, parameter_set_hostname_good) {
       unsigned char expected_array[11] = {0x6d, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x31, 0x35, 0x00, 0x00, 0x00};
       unsigned char result[11]{};
       std::string input = {"mocker15"};
       setParam<hostname>(result, input);
       EXPECT_TRUE(ArraysMatch<unsigned char>(expected_array, result,sizeof(expected_array)));
}

TEST(utils, parameter_set_hostname_bad) {
       unsigned char expected_array[11] = {};
       unsigned char result[11] = {};
       std::string input = {"mocker155555"};
       setParam<hostname>(result, input);
       EXPECT_TRUE(ArraysMatch<unsigned char>(expected_array, result,sizeof(expected_array)));
}


TEST(utils, parameter_set_sysid_good) {
       unsigned char expected_array[7] = {0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00};
       unsigned char result[7]{};
       std::string input = {"0010.0010.0010"};
       setParam<sysid>(result, input);
       EXPECT_TRUE(ArraysMatch<unsigned char>(expected_array, result,sizeof(expected_array)));
}



TEST(structs, eth_header) {
	unsigned char expected_hdr[] = {0x09, 0x00, 0x2b, 0x00, 0x00, 0x05,
					0x00, 0x0c, 0x29, 0x6f, 0x14, 0xbf,
					0x00, 0x00, 0xfe, 0xfe, 0x03};
	eth_header hdr;
	ASSERT_EQ(0, hdr.length());
	EXPECT_TRUE(ArraysMatch<unsigned char>(expected_hdr, hdr.dmac(), sizeof(expected_hdr)));
}




int main(int argc, char** argv) {
	testing::InitGoogleTest(&argc, argv);
	testing::InitGoogleMock(&argc, argv);
	return RUN_ALL_TESTS();
}
